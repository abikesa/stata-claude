
  ___  ____  ____  ____  ____ ®
 /__    /   ____/   /   ____/      18.0
___/   /   /___/   /   /___/       MP—Parallel Edition

 Statistics and Data Science       Copyright 1985-2023 StataCorp LLC
                                   StataCorp
                                   4905 Lakeway Drive
                                   College Station, Texas 77845 USA
                                   800-STATA-PC        https://www.stata.com
                                   979-696-4600        stata@stata.com

Stata license: Single-user 2-core  perpetual
Serial number: 501806349787
  Licensed to: Abimereki Muzaale
               Johns Hopkins University

Notes:
      1. Stata is running in batch mode.
      2. Unicode is supported; see help unicode_advice.
      3. More than 2 billion observations are allowed; see help obs_advice.
      4. Maximum number of variables is set to 5,000 but can be increased;
          see help set_maxvar.

. do just-click.do 

. /**************************************************************************
>  🔁 just-click.do – Fully terminal-native, auto-organizing Stata workflow
>  Fixed version that properly moves files to organized folders
> **************************************************************************/
. 
. * 🌐 Load paths from config
. do config.do

. /**************************************************************************
>  🧱 config.do – Configuration settings, globals, system macros
> **************************************************************************/
. 
. clear all

. set more off

. 
. * 🌐 Set global slash (OS-specific shell separator)
. if c(os) == "Windows" {
.     global SL "\"
. }

. else {
.     global SL "/"
. }

. 
. * 🌊 Set working directory as root + define key folders
. global root c(pwd)

. 
. foreach folder in data output code notes {
  2.     local fpath "$root${SL}`folder'"
  3.     capture mkdir "`fpath'"
  4.     global `folder' "`fpath'"
  5. }

. 
end of do-file

. 
. * ❤️ Create clean folder structure with better naming
. local folders data output scripts docs

. foreach f of local folders {
  2.     !mkdir -p "`f'"
  3. }





. 
. * 🧹 Move .dta files to /data
. !find . -maxdepth 1 -name "*.dta" -exec mv -v {} data/ \;

./donors.dta -> data/donors.dta
./tx_yr.dta -> data/tx_yr.dta
./transplants.dta -> data/transplants.dta
./donors_recipients.dta -> data/donors_recipients.dta

. 
. * 🧹 Move .do files (except this one) to /scripts  
. !find . -maxdepth 1 -name "*.do" ! -name "just-click.do" -exec mv -v {} scrip
> ts/ \;

./config.do -> scripts/config.do

. 
. * 🧹 Move .sh, .py, .ipynb scripts to /scripts
. !find . -maxdepth 1 \( -name "*.sh" -o -name "*.py" -o -name "*.ipynb" \) -ex
> ec mv -v {} scripts/ \;

./dir.sh -> scripts/dir.sh

. 
. * 🧹 Move .log files to /output
. !find . -maxdepth 1 -name "*.log" -exec mv -v {} output/ \;

./just-click.log -> output/just-click.log

. 
. * 📝 Create a basic README in docs
. !echo "# Project Documentation" > docs/README.md


. !echo "" >> docs/README.md


. !echo "This folder contains project documentation and notes." >> docs/README.
> md


. !echo "Generated by just-click.do on `date`" >> docs/README.md


. 
. * 🌀 Reset Stata session + begin logging
. clear all

. log using "output/analysis_output.log", replace
(file /Users/hades/Desktop/output/analysis_output.log not found)
-------------------------------------------------------------------------------
      name:  <unnamed>
       log:  /Users/hades/Desktop/output/analysis_output.log
  log type:  text
 opened on:  22 Jun 2025, 18:54:19

. 
. * 🐬 Load data and merge (if data files exist)
. capture {

. 
. * ✅ Move this script and current log to their destinations
. log close
      name:  <unnamed>
       log:  /Users/hades/Desktop/output/analysis_output.log
  log type:  text
 closed on:  22 Jun 2025, 18:54:20
-------------------------------------------------------------------------------

. !mv -v "just-click.do" scripts/

just-click.do -> scripts/just-click.do

. !mv -v "just-click.log" output/ 2>/dev/null || true


. 
. * 📦 Create file manifest
. !echo "# File Organization Summary" > output/manifest.txt


. !echo "Generated on: `date`" >> output/manifest.txt


. !echo "" >> output/manifest.txt


. !echo "## Data Files:" >> output/manifest.txt


. !ls -la data/ >> output/manifest.txt 2>/dev/null || echo "No data files found
> " >> output/manifest.txt


. !echo "" >> output/manifest.txt


. !echo "## Script Files:" >> output/manifest.txt


. !ls -la scripts/ >> output/manifest.txt 2>/dev/null || echo "No script files 
> found" >> output/manifest.txt


. !echo "" >> output/manifest.txt


. !echo "## Output Files:" >> output/manifest.txt


. !ls -la output/ >> output/manifest.txt 2>/dev/null || echo "No output files f
> ound" >> output/manifest.txt


. !echo "" >> output/manifest.txt


. !echo "## Documentation:" >> output/manifest.txt


. !ls -la docs/ >> output/manifest.txt 2>/dev/null || echo "No documentation fi
> les found" >> output/manifest.txt


. 
. * 📦 Optional: Tree view if available
. !which tree >/dev/null 2>&1 && tree -h > output/directory_tree.txt || echo "T
> ree command not available" > output/directory_tree.txt


. 
. noi di as result "✅ All done! Files organized into:"
✅ All done! Files organized into:

. noi di as result "   📁 data/    - All .dta files"
   📁 data/    - All .dta files

. noi di as result "   📁 scripts/ - All .do, .sh, .py files"  
   📁 scripts/ - All .do, .sh, .py files

. noi di as result "   📁 output/  - All .log files and results"
   📁 output/  - All .log files and results

. noi di as result "   📁 docs/    - README and documentation"
   📁 docs/    - README and documentation

. noi di as result ""


. noi di as result "🚀 Ready to zip and send back!"
🚀 Ready to zip and send back!

. noi di as result "   Run: tar -czf project_organized.tar.gz data scripts outp
> ut docs"
   Run: tar -czf project_organized.tar.gz data scripts output docs

. 
end of do-file
